// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get multiple games
	// (GET /games)
	GetGames(c *gin.Context, params GetGamesParams)
	// Create a game
	// (POST /games)
	CreateGame(c *gin.Context)
	// Delete game data
	// (DELETE /games/{gameId})
	DeleteGame(c *gin.Context, gameId GameId)
	// Retrieve game data
	// (GET /games/{gameId})
	GetGame(c *gin.Context, gameId GameId)
	// Update some of the game data
	// (PATCH /games/{gameId})
	UpdateGame(c *gin.Context, gameId GameId)
	// Get multiple offers
	// (GET /offers)
	GetOffers(c *gin.Context, params GetOffersParams)
	// Create an offer
	// (POST /offers)
	CreateOffer(c *gin.Context)
	// Delete offer data
	// (DELETE /offers/{offerId})
	DeleteOffer(c *gin.Context, offerId OfferId)
	// Retreive offer data
	// (GET /offers/{offerId})
	GetOffer(c *gin.Context, offerId OfferId)
	// Update the status of the offer
	// (PATCH /offers/{offerId})
	UpdateOffer(c *gin.Context, offerId OfferId)
	// Create a user
	// (POST /users)
	CreateUser(c *gin.Context)
	// Delete user data
	// (DELETE /users/{userId})
	DeleteUser(c *gin.Context, userId UserId)
	// Retrieve user data
	// (GET /users/{userId})
	GetUser(c *gin.Context, userId UserId)
	// Update some of the user data
	// (PATCH /users/{userId})
	UpdateUser(c *gin.Context, userId UserId)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetGames operation middleware
func (siw *ServerInterfaceWrapper) GetGames(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetGamesParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter offset: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "userId" -------------

	err = runtime.BindQueryParameter("form", true, false, "userId", c.Request.URL.Query(), &params.UserId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter userId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetGames(c, params)
}

// CreateGame operation middleware
func (siw *ServerInterfaceWrapper) CreateGame(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateGame(c)
}

// DeleteGame operation middleware
func (siw *ServerInterfaceWrapper) DeleteGame(c *gin.Context) {

	var err error

	// ------------- Path parameter "gameId" -------------
	var gameId GameId

	err = runtime.BindStyledParameterWithOptions("simple", "gameId", c.Param("gameId"), &gameId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter gameId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteGame(c, gameId)
}

// GetGame operation middleware
func (siw *ServerInterfaceWrapper) GetGame(c *gin.Context) {

	var err error

	// ------------- Path parameter "gameId" -------------
	var gameId GameId

	err = runtime.BindStyledParameterWithOptions("simple", "gameId", c.Param("gameId"), &gameId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter gameId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetGame(c, gameId)
}

// UpdateGame operation middleware
func (siw *ServerInterfaceWrapper) UpdateGame(c *gin.Context) {

	var err error

	// ------------- Path parameter "gameId" -------------
	var gameId GameId

	err = runtime.BindStyledParameterWithOptions("simple", "gameId", c.Param("gameId"), &gameId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter gameId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateGame(c, gameId)
}

// GetOffers operation middleware
func (siw *ServerInterfaceWrapper) GetOffers(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetOffersParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter offset: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "offererUserId" -------------

	err = runtime.BindQueryParameter("form", true, false, "offererUserId", c.Request.URL.Query(), &params.OffererUserId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter offererUserId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "recipientUserId" -------------

	err = runtime.BindQueryParameter("form", true, false, "recipientUserId", c.Request.URL.Query(), &params.RecipientUserId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter recipientUserId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetOffers(c, params)
}

// CreateOffer operation middleware
func (siw *ServerInterfaceWrapper) CreateOffer(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateOffer(c)
}

// DeleteOffer operation middleware
func (siw *ServerInterfaceWrapper) DeleteOffer(c *gin.Context) {

	var err error

	// ------------- Path parameter "offerId" -------------
	var offerId OfferId

	err = runtime.BindStyledParameterWithOptions("simple", "offerId", c.Param("offerId"), &offerId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter offerId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteOffer(c, offerId)
}

// GetOffer operation middleware
func (siw *ServerInterfaceWrapper) GetOffer(c *gin.Context) {

	var err error

	// ------------- Path parameter "offerId" -------------
	var offerId OfferId

	err = runtime.BindStyledParameterWithOptions("simple", "offerId", c.Param("offerId"), &offerId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter offerId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetOffer(c, offerId)
}

// UpdateOffer operation middleware
func (siw *ServerInterfaceWrapper) UpdateOffer(c *gin.Context) {

	var err error

	// ------------- Path parameter "offerId" -------------
	var offerId OfferId

	err = runtime.BindStyledParameterWithOptions("simple", "offerId", c.Param("offerId"), &offerId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter offerId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateOffer(c, offerId)
}

// CreateUser operation middleware
func (siw *ServerInterfaceWrapper) CreateUser(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateUser(c)
}

// DeleteUser operation middleware
func (siw *ServerInterfaceWrapper) DeleteUser(c *gin.Context) {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithOptions("simple", "userId", c.Param("userId"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter userId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteUser(c, userId)
}

// GetUser operation middleware
func (siw *ServerInterfaceWrapper) GetUser(c *gin.Context) {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithOptions("simple", "userId", c.Param("userId"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter userId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUser(c, userId)
}

// UpdateUser operation middleware
func (siw *ServerInterfaceWrapper) UpdateUser(c *gin.Context) {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithOptions("simple", "userId", c.Param("userId"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter userId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateUser(c, userId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/games", wrapper.GetGames)
	router.POST(options.BaseURL+"/games", wrapper.CreateGame)
	router.DELETE(options.BaseURL+"/games/:gameId", wrapper.DeleteGame)
	router.GET(options.BaseURL+"/games/:gameId", wrapper.GetGame)
	router.PATCH(options.BaseURL+"/games/:gameId", wrapper.UpdateGame)
	router.GET(options.BaseURL+"/offers", wrapper.GetOffers)
	router.POST(options.BaseURL+"/offers", wrapper.CreateOffer)
	router.DELETE(options.BaseURL+"/offers/:offerId", wrapper.DeleteOffer)
	router.GET(options.BaseURL+"/offers/:offerId", wrapper.GetOffer)
	router.PATCH(options.BaseURL+"/offers/:offerId", wrapper.UpdateOffer)
	router.POST(options.BaseURL+"/users", wrapper.CreateUser)
	router.DELETE(options.BaseURL+"/users/:userId", wrapper.DeleteUser)
	router.GET(options.BaseURL+"/users/:userId", wrapper.GetUser)
	router.PATCH(options.BaseURL+"/users/:userId", wrapper.UpdateUser)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"IIouAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
