// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package api

// Defines values for GameConditionEnum.
const (
	Fair GameConditionEnum = "fair"
	Good GameConditionEnum = "good"
	Mint GameConditionEnum = "mint"
	Poor GameConditionEnum = "poor"
)

// Defines values for OfferStatusEnum.
const (
	Accepted  OfferStatusEnum = "accepted"
	Cancelled OfferStatusEnum = "cancelled"
	Pending   OfferStatusEnum = "pending"
	Rejected  OfferStatusEnum = "rejected"
)

// GameConditionEnum defines model for GameConditionEnum.
type GameConditionEnum string

// GameResponse defines model for GameResponse.
type GameResponse struct {
	Condition GameConditionEnum `json:"condition"`
	GameId    int               `json:"gameId"`
	Name      string            `json:"name"`
	Owners    *int              `json:"owners,omitempty"`

	// Publisher publisher of the game
	Publisher string `json:"publisher"`
	System    string `json:"system"`

	// UserId hateoas link to the user who owns the game
	UserId string `json:"userId"`
	Year   int    `json:"year"`
}

// GameSearchResponse defines model for GameSearchResponse.
type GameSearchResponse = []GameResponse

// OfferResponse defines model for OfferResponse.
type OfferResponse struct {
	OfferId int `json:"offerId"`

	// OffererGameId hateoas link to the game being offered by the trade intiator
	OffererGameId string `json:"offererGameId"`

	// OffererUserId hateoas link to the user who initiated the trade
	OffererUserId string `json:"offererUserId"`

	// RecipientGameId hateoas link to the game being requested by the trade recipient
	RecipientGameId string `json:"recipientGameId"`

	// RecipientUserId hateoas link to the user who is being offered the trade
	RecipientUserId string          `json:"recipientUserId"`
	Status          OfferStatusEnum `json:"status"`
}

// OfferSearchResponse defines model for OfferSearchResponse.
type OfferSearchResponse = []OfferResponse

// OfferStatusEnum defines model for OfferStatusEnum.
type OfferStatusEnum string

// UserResponse defines model for UserResponse.
type UserResponse struct {
	Address string `json:"address"`
	Email   string `json:"email"`
	Name    string `json:"name"`
	UserId  int    `json:"userId"`
}

// GameId defines model for gameId.
type GameId = int

// Limit defines model for limit.
type Limit = int

// OfferId defines model for offerId.
type OfferId = int

// Offset defines model for offset.
type Offset = int

// SortByOfferer defines model for sortByOfferer.
type SortByOfferer = int

// SortByOwner defines model for sortByOwner.
type SortByOwner = int

// SortByRecipient defines model for sortByRecipient.
type SortByRecipient = int

// UserId defines model for userId.
type UserId = int

// PatchGame defines model for PatchGame.
type PatchGame struct {
	Condition *GameConditionEnum `json:"condition,omitempty"`

	// Name name of the game
	Name *string `json:"name,omitempty"`

	// Owners the number of owners who owned the game before
	Owners *int `json:"owners,omitempty"`

	// Publisher publisher of the game
	Publisher *string `json:"publisher,omitempty"`

	// System the system that the game was released on
	System *string `json:"system,omitempty"`

	// Year year of the game was published/released
	Year *int `json:"year,omitempty"`
}

// PatchOffer defines model for PatchOffer.
type PatchOffer = OfferStatusEnum

// PatchUser defines model for PatchUser.
type PatchUser struct {
	Address  *string `json:"address,omitempty"`
	Name     *string `json:"name,omitempty"`
	Password *string `json:"password,omitempty"`
}

// PostGame defines model for PostGame.
type PostGame struct {
	Condition GameConditionEnum `json:"condition"`

	// Name name of the game
	Name string `json:"name"`

	// Owners the number of owners who owned the game before
	Owners *int `json:"owners,omitempty"`

	// Publisher publisher of the game
	Publisher string `json:"publisher"`

	// System the system that the game was released on
	System string `json:"system"`

	// UserId userId of the owner of the game
	UserId int `json:"userId"`

	// Year year of the game was published/released
	Year int `json:"year"`
}

// PostOffer defines model for PostOffer.
type PostOffer struct {
	// OffererGameId the integer representing the game being traded by the offerer
	OffererGameId int `json:"offererGameId"`

	// OffererUserId the integer representing the trade creator's userId
	OffererUserId int `json:"offererUserId"`

	// RecipientGameId the integer representing the game being requested of the reipient
	RecipientGameId int `json:"recipientGameId"`

	// RecipientUserId the integer representing the trade receiver's userId
	RecipientUserId int `json:"recipientUserId"`
}

// PostUser defines model for PostUser.
type PostUser struct {
	Address  string `json:"address"`
	Email    string `json:"email"`
	Name     string `json:"name"`
	Password string `json:"password"`
}

// GetGamesParams defines parameters for GetGames.
type GetGamesParams struct {
	// Limit the number of resources you want returned. should be a non negative integer
	Limit *Limit `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset the number of resources you want to skip before returning results. should be a non negative integer.
	Offset *Offset `form:"offset,omitempty" json:"offset,omitempty"`

	// UserId query parameter to filter results by userId.
	UserId *SortByOwner `form:"userId,omitempty" json:"userId,omitempty"`
}

// CreateGameJSONBody defines parameters for CreateGame.
type CreateGameJSONBody struct {
	Condition GameConditionEnum `json:"condition"`

	// Name name of the game
	Name string `json:"name"`

	// Owners the number of owners who owned the game before
	Owners *int `json:"owners,omitempty"`

	// Publisher publisher of the game
	Publisher string `json:"publisher"`

	// System the system that the game was released on
	System string `json:"system"`

	// UserId userId of the owner of the game
	UserId int `json:"userId"`

	// Year year of the game was published/released
	Year int `json:"year"`
}

// UpdateGameJSONBody defines parameters for UpdateGame.
type UpdateGameJSONBody struct {
	Condition *GameConditionEnum `json:"condition,omitempty"`

	// Name name of the game
	Name *string `json:"name,omitempty"`

	// Owners the number of owners who owned the game before
	Owners *int `json:"owners,omitempty"`

	// Publisher publisher of the game
	Publisher *string `json:"publisher,omitempty"`

	// System the system that the game was released on
	System *string `json:"system,omitempty"`

	// Year year of the game was published/released
	Year *int `json:"year,omitempty"`
}

// GetOffersParams defines parameters for GetOffers.
type GetOffersParams struct {
	// Limit the number of resources you want returned. should be a non negative integer
	Limit *Limit `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset the number of resources you want to skip before returning results. should be a non negative integer.
	Offset *Offset `form:"offset,omitempty" json:"offset,omitempty"`

	// OffererUserId query parameter to filter results by offererId
	OffererUserId *SortByOfferer `form:"offererUserId,omitempty" json:"offererUserId,omitempty"`

	// RecipientUserId query parameter to filter results by offererId
	RecipientUserId *SortByRecipient `form:"recipientUserId,omitempty" json:"recipientUserId,omitempty"`
}

// CreateOfferJSONBody defines parameters for CreateOffer.
type CreateOfferJSONBody struct {
	// OffererGameId the integer representing the game being traded by the offerer
	OffererGameId int `json:"offererGameId"`

	// OffererUserId the integer representing the trade creator's userId
	OffererUserId int `json:"offererUserId"`

	// RecipientGameId the integer representing the game being requested of the reipient
	RecipientGameId int `json:"recipientGameId"`

	// RecipientUserId the integer representing the trade receiver's userId
	RecipientUserId int `json:"recipientUserId"`
}

// CreateUserJSONBody defines parameters for CreateUser.
type CreateUserJSONBody struct {
	Address  string `json:"address"`
	Email    string `json:"email"`
	Name     string `json:"name"`
	Password string `json:"password"`
}

// UpdateUserJSONBody defines parameters for UpdateUser.
type UpdateUserJSONBody struct {
	Address  *string `json:"address,omitempty"`
	Name     *string `json:"name,omitempty"`
	Password *string `json:"password,omitempty"`
}

// CreateGameJSONRequestBody defines body for CreateGame for application/json ContentType.
type CreateGameJSONRequestBody CreateGameJSONBody

// UpdateGameJSONRequestBody defines body for UpdateGame for application/json ContentType.
type UpdateGameJSONRequestBody UpdateGameJSONBody

// CreateOfferJSONRequestBody defines body for CreateOffer for application/json ContentType.
type CreateOfferJSONRequestBody CreateOfferJSONBody

// UpdateOfferJSONRequestBody defines body for UpdateOffer for application/json ContentType.
type UpdateOfferJSONRequestBody = OfferStatusEnum

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody CreateUserJSONBody

// UpdateUserJSONRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody UpdateUserJSONBody
